{"meta":{"title":"coder王鹤鸣","subtitle":"","description":"","author":"coderwhm","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-04-29T07:15:56.000Z","updated":"2020-04-29T07:16:57.102Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-29T07:12:22.000Z","updated":"2020-04-29T07:14:31.661Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-04-29T07:16:25.000Z","updated":"2020-04-29T07:17:49.036Z","comments":true,"path":"contact/index.html","permalink":"http://yoursite.com/contact/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-06T13:21:56.731Z","updated":"2020-04-29T07:21:30.496Z","comments":true,"path":"data/friends.json","permalink":"http://yoursite.com/data/friends.json","excerpt":"","text":"[{\"avatar\":\"http://image.luokangyuan.com/1_qq_27922023.jpg\",\"name\":\"码酱\",\"introduction\":\"我不是大佬，只是在追寻大佬的脚步\",\"url\":\"http://luokangyuan.com/\",\"title\":\"前去学习\"},{\"avatar\":\"http://image.luokangyuan.com/4027734.jpeg\",\"name\":\"闪烁之狐\",\"introduction\":\"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\",\"url\":\"https://blinkfox.github.io/\",\"title\":\"前去学习\"},{\"avatar\":\"http://image.luokangyuan.com/avatar.jpg\",\"name\":\"ja_rome\",\"introduction\":\"平凡的脚步也可以走出伟大的行程\",\"url\":\"https://me.csdn.net/jlh912008548\",\"title\":\"前去学习\"}]"},{"title":"_data","date":"2020-04-29T07:19:49.000Z","updated":"2020-04-29T07:19:49.844Z","comments":true,"path":"data/index.html","permalink":"http://yoursite.com/data/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-06T13:46:06.066Z","updated":"2020-05-06T13:37:59.729Z","comments":true,"path":"data/musics.json","permalink":"http://yoursite.com/data/musics.json","excerpt":"","text":"[{\"name\":\"明日的夜空巡逻班\",\"artist\":\"hanser\",\"url\":\"https://music.163.com/#/song?id=437250682\",\"cover\":\"http://xxx.com/music-cover1.png\"},{\"name\":\"Take me hand\",\"artist\":\"DAISHI DANCE,Cecile Corbel\",\"url\":\"https://music.163.com/#/song?id=1325424977\",\"cover\":\"/medias/music/cover2.png\"}]"},{"title":"friends","date":"2020-04-29T07:18:17.000Z","updated":"2020-04-29T07:18:51.852Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-29T07:14:58.000Z","updated":"2020-04-29T07:15:34.762Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python各种符号","slug":"Python各种符号","date":"2020-05-07T14:18:43.000Z","updated":"2020-05-08T06:40:19.540Z","comments":true,"path":"2020/05/07/Python各种符号/","link":"","permalink":"http://yoursite.com/2020/05/07/Python%E5%90%84%E7%A7%8D%E7%AC%A6%E5%8F%B7/","excerpt":"#Python中常用的符号关键字","text":"#Python中常用的符号关键字 关键字 描述 实例 and 逻辑与 True and False == False as with-as语句的一部分 with x as y: pass assert 断言（确保）某东西为真 assert False, “Error!” break 立即停止循环 while True : break class 定义类 class person(object) continue 停止当前循环的后续步骤，再做一次循环 while True: continue def 定义函数 def x(): pass del 从字典中删除 del x[y] elif else条件 if : x; elif: y; else: z else else条件 if : x; elif: y; else: z except 如果发生异常，运行此处代码 except ValueError, e: print(e) exec 将字符串作为Python脚本运行 exec ‘print(“hello”)’ finally 不管是否发生异常，都运行此处代码 finally: pass for 针对物件集合执行循环 for i in range(1,10) from 从模块中导入特定部分 from x import y global 申明全局变量 global x if if条件 if : x; elif: y; else: z import 将模块导入当前文件以供使用 import os in for循环的一部分，也可以x是否在y中的条件判断 for i in range(1,10)以及1 in [1] == True is 类似于==，判断是否一样 1 is 1 == True lambda 创建短匿名函数 s = lambda y : y ** y;s(3)","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Pyhton","slug":"Pyhton","permalink":"http://yoursite.com/tags/Pyhton/"}]},{"title":"Python列表和循环","slug":"Python列表和循环","date":"2020-05-07T08:32:51.000Z","updated":"2020-05-08T06:42:41.729Z","comments":true,"path":"2020/05/07/Python列表和循环/","link":"","permalink":"http://yoursite.com/2020/05/07/Python%E5%88%97%E8%A1%A8%E5%92%8C%E5%BE%AA%E7%8E%AF/","excerpt":"#列表","text":"#列表 在开始使用for循环之前，你需要在某个位置存放循环的结果。最好的办法就是使用列表(list)，顾名思义，它就是一个从头到尾按照顺序存放东西的容器。##如何创建列表hair = [‘brown’,’blond’,’red’]eyes = [‘brown’,’blue’,’green’]weights = [1,2,3,4]你要做的是以左方括号([)开头“打开”列表，然后写下你要放入列表里的东西，用逗号隔开，就跟函数的参数一样，最后你需要用右方括号(])表明列表结束。然后Python接收这个列表以及里面所有的内容，将其赋值给一个变量。##列表及相关使用 增加 1【append】 namelist = [“小张”,”小王”,”小亮”]print(“—–增加前-名单列表数据—–”)for name in namelist: print(name) nametemp = input(“请输入想增加的名字:”)namelist.append(nametemp) #在末尾追加一个元素print(“—–增加后-名单列表数据—–”)for name in namelist: print(name) a = [1,2,3,4]b = [5,6]a.append(b)print(a) #将b列表当作一个元素，加入到a列表中 #增加 【extend】a = [1,2,3,4]b = [5,6]a.extend(b)print(a) #将b列表中的每个元素，逐一追加到a列表中 a = [0,1,2,3]a.insert(1,2) #第一个表示下标，第二个表示元素（对象）print(a) #指定下标插入元素 #删 [del] [pop] [remove] movieName = [“黑客帝国”,”指环王”,”速度与激情”,”加勒比海盗”,”第一滴血”]print(“—–删除前-电影名单列表—–”)for name in movieName: print(name)#del movieName[2] #在指定下标删除一个元素#movieName.pop() #弹出末尾最后一个元素movieName.remove(“指环王”) #直接删除指定内容的元素print(“—–删除后-电影名单列表—–”)for name in movieName: print(name) #改 namelist = [“小张”,”小王”,”小亮”]print(“—–修改前-名单列表数据—–”)for name in namelist: print(name) #修改指定下标的元素内容namelist[1] = “小红” namelistprint(“—–修改后-名单列表数据—–”)for name in namelist: print(name) #查【in- not in】 namelist = [“小张”,”小王”,”小亮”]findname = input(“请输入你要查找的学生内容:”)if findname in namelist: print(“在学院名单中找到了相同的名字”)else: print(“未找到”) a = [“a”,”b”,”c”,”d”,”a”] print(a.index(“a”,1,5)) #查找指定下标范围的元素，并返回找到对应数据的下标 print(a.index(“a”,1,4)) #范围区间 左闭右开 #找不到会报错 print(a.count(“b”)) #统计某个元素出现几次 #排序和反转 a = [1,2,3,4]print(a)a.reverse() #将列表所以元素反转print(a)a.sort() #排序 升序print(a)a.sort(reverse=True) #降序print(a) #for循环Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。这个也没什么可说的吧","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-05-06T08:06:51.291Z","updated":"2020-05-08T04:56:29.351Z","comments":true,"path":"2020/05/06/hello-world/","link":"","permalink":"http://yoursite.com/2020/05/06/hello-world/","excerpt":"","text":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Python读写文件","slug":"Python读写文件","date":"2020-04-29T15:18:00.000Z","updated":"2020-05-08T06:40:36.898Z","comments":true,"path":"2020/04/29/Python读写文件/","link":"","permalink":"http://yoursite.com/2020/04/29/Python%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/","excerpt":"#读写文件","text":"#读写文件 close:关闭文件。跟编译器中的文件保存是一个意思。read:读取文件的内容。你可以给结果赋给一个变量。readline:只读取文本文件的一行。truncate:清空文件，请小心使用该命令。write(‘stuff’):将stuff写入文件。seek:将读写位置一致文章开头。 f = open(“test.text”,”w”) #打开文件，”w“为写入操作，找不到就新建，”r“是只读模式，找不到会报错f.close() #关闭文件 读取指定‘’’f = open(“test.txt”,”w”)f.write(“Life is short,you need python”)f.close()f = open(“test.txt”,”r”) contend = f.read(5)print(contend)contend = f.read(10)print(contend)‘’’ 按行数读取‘’’f = open(“test.txt”,”w”)f.write(“Life is short,you need python”)f = open(“test.txt”,”r”)contend = f.readlines() #一次性读取全部文件为列表，每行一个字符串元素#print(contend)i = 1for temp in contend: print(“%d:%s”%(i,temp)) i += 1 f.close()‘’’‘’’f = open(“test.txt”,”w”)f.write(“Life is short,you need python”)f = open(“test.txt”,”r”)contend = f.readline()print(contend)‘’’","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python提示和传递.","slug":"Python提示和传递","date":"2020-04-29T07:56:15.000Z","updated":"2020-05-08T06:42:05.820Z","comments":true,"path":"2020/04/29/Python提示和传递/","link":"","permalink":"http://yoursite.com/2020/04/29/Python%E6%8F%90%E7%A4%BA%E5%92%8C%E4%BC%A0%E9%80%92/","excerpt":"#提示和传递我们使用argv和input一起来向用户提一些问题。","text":"#提示和传递我们使用argv和input一起来向用户提一些问题。 from sys import argv script,user_name = argvprompt = ‘&gt;’ print(f”Hi{user_name},I am the {script} script”)print(“I would like to ask you a few question”)prinnt(f”Do you like me {user_name}?”)likes = input(prompt) …我们将用户提示符设置为变量prompt，这样就不需要在每次用到input时反复输入提示用户的字符了。而且，如果要将提示符修改成别的字符串，只要改一个位置就可以了。","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python参数、解包和变量.","slug":"Python参数、解包和变量","date":"2020-04-28T14:32:17.000Z","updated":"2020-05-08T06:39:25.630Z","comments":true,"path":"2020/04/28/Python参数、解包和变量/","link":"","permalink":"http://yoursite.com/2020/04/28/Python%E5%8F%82%E6%95%B0%E3%80%81%E8%A7%A3%E5%8C%85%E5%92%8C%E5%8F%98%E9%87%8F/","excerpt":"#参数、解包和变量","text":"#参数、解包和变量 将变量传递给脚本的方法（所谓脚本，就是你编写的.py程序）。举个例子，如果要运行ex13.py，只要在命令行键入python3.8 ex13.py就可以了。这条命令中的ex13.py就是所谓的参数(argument)，接下来我们要做的就是写一个可以接收参数的脚本.from sys import argv read the WYSS section for how to run thisscript, first, second, third = argv print(“The script is called”,script)print(“Your first variable is :”,first)print(“Your second variable is:”,second)print(“Your third varisble is:”,third) 在第1行有一个import语句，这是将Python的特性引入脚本的方法。Python不会一下子将他所有的特性给你，而是让你需要什么就调用什么。这样不但可以让你的程序保持很小，而且以后其他程序员读你的代码时，这些import也可以成为文档查阅。 argv即所谓的参数变量(argument variable)，这是一个非常标准的编程术语。在其他编程语言中也可以见到。这个变量保存者你运行Python脚本时传递给Python脚本的参数 第3行将argv解包(unpack)，与其将所有参数放到同一个变量下面，不如将其赋值给4个变量：script、first、second和third。这也许看上去有点奇怪，不过“解包”可能时最好的描述方式了。它的含义很简单：“把argv中的东西取出，解包，将所有的参数依次赋值给左边的变量。” 接下来就是正常打印了。","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python正反斜杠的运用.","slug":"Python正反斜杠的运用","date":"2020-04-28T03:57:07.000Z","updated":"2020-05-08T06:42:55.406Z","comments":true,"path":"2020/04/28/Python正反斜杠的运用/","link":"","permalink":"http://yoursite.com/2020/04/28/Python%E6%AD%A3%E5%8F%8D%E6%96%9C%E6%9D%A0%E7%9A%84%E8%BF%90%E7%94%A8/","excerpt":"#正反斜杠","text":"#正反斜杠 ##反斜杠转义字符 描述\\（处于行尾位置） 续行符\\ 反斜杠’ 单引号&quot; 双引号\\b 退格\\n 换行\\v 纵向制表符\\t 横向制表符\\r 回车\\f 换页(1). 续行符我们在编码时，每一行的代码数量是有限制的，而很多时候我们所要表达内容一行并不能完整表达，这时候就需要续行符来对不同行的内容进行连接，使其作为完整的一行内容来输出。(2).单引号&amp;双引号在由’’之间定义的字符串之中再出现单引号（或双引号之间再出现双引号）的情况，解释器会由于无法识别字符串定义的开始和结束位置而报错，这时候就需要反斜杠来对与定义字符串相同的引号形式之间出现的该引号或反斜杠进行转义说明，以确保python解释器可以将其正确解释。(3)正则表达式：在正则表达式中对于一个反斜杠,需要使用普通字符串\\\\，或者是使用原始字符串中的r”\\“来对其进行匹配。在正则表达式中\\是特殊符号，我们为了匹配到该字符串，取消其在正则表达式中的特殊含义，就使用\\来匹配正则表达式中的,同时又为了取消反斜杠在普通字符串之中的特殊含义，又需要在之前的基础上再针对每一个反斜杠再增加一个反斜杠来取消其特殊含义，即为\\\\。当我们使用了原始字符串操作符后，就会取消了在普通字符串之中的转义功能，而只需要匹配正则表达式中的,即为r”\\“。##正斜杠读取绝对路径时用正斜杠","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python打印的多种方式.","slug":"Python打印的多种方式","date":"2020-04-28T00:41:56.000Z","updated":"2020-05-08T06:39:45.352Z","comments":true,"path":"2020/04/28/Python打印的多种方式/","link":"","permalink":"http://yoursite.com/2020/04/28/Python%E6%89%93%E5%8D%B0%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"#print的多种方式##更多print1","text":"#print的多种方式##更多print1 print(“hello world!”)打印字符串print(“Its fleece was white as {}.format(‘snow’)) 利用格式化字符打印print(“.” * 10)end1 = “P”end2 = “y”end3 = “t”end4 = “h”end5 = “o”end6 = “n”print(end1+ end2 + end3 + end4 + end5 +end6 ) 字符串拼接##更多print2formatter = “{} {} {} {}”print(formatter.format(1,2,3,4))print(formatter.format(formatter,formatter,formatter,formatter))Python执行以下内容：1.取第一行定义的formatter字符串。2.调用它的format函数，这相当于告诉他执行一个叫format的指令。3.给format传递4个参数，这些参数和formatter变量中的{}匹配，相当于将参数传递给了format这个指令4.在formatter上调用format的结果是一共新字符串，其中的{}被4个替换掉了。","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python字符串和文本.","slug":"Python字符串和文本","date":"2020-04-27T23:37:06.000Z","updated":"2020-05-08T06:43:19.595Z","comments":true,"path":"2020/04/28/Python字符串和文本/","link":"","permalink":"http://yoursite.com/2020/04/28/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%96%87%E6%9C%AC/","excerpt":"#字符串和文本##字符串","text":"#字符串和文本##字符串 字符串通常是指你要展示给别人看的或者想要从程序里“导出”的一小段字符。Python可以通过双引号（“”）或者单引号（‘’）识别出字符串来如果你把单引号或双引号括起来的文本放到print后面它会被Python打印出来字符串可以包含已经见过的格式化字符。","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python变量和命名.","slug":"Python变量和命名","date":"2020-04-27T23:03:40.000Z","updated":"2020-05-08T04:56:50.921Z","comments":true,"path":"2020/04/28/Python变量和命名/","link":"","permalink":"http://yoursite.com/2020/04/28/Python%E5%8F%98%E9%87%8F%E5%92%8C%E5%91%BD%E5%90%8D/","excerpt":"#变量和命名 变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。","text":"#变量和命名 变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过变量名访问。在指令式语言中，变量通常是可变的；但在纯函数式语言（如Haskell）中，变量可能是不可变的。在一些语言中，变量可能被明确为是能表示可变状态、具有存储空间的抽象（如在Java和Visual Basic中）；但另外一些语言可能使用其它概念（如C的对象）来指称这种抽象，而不严格地定义“变量”的准确外延。如：a = 10b = 5变量名只能包含字母、数字和下划线。变量名可以是字母或下划线打头，但不能以数字打头；变量名不能包含空格，但可以使用下划线来分割其中的单词。例如：greeting_message；不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print；变量名应简短又具有描述性；慎用小写字母l和大写字母O，容易和1和0混淆。","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"我的个人博客.","slug":"我的个人博客","date":"2020-04-27T15:04:54.000Z","updated":"2020-04-29T15:26:56.786Z","comments":true,"path":"2020/04/27/我的个人博客/","link":"","permalink":"http://yoursite.com/2020/04/27/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"##内容 首先得十分感谢羊哥(CodeSheep)的 手把手教你从0开始搭建自己的个人博客: https://www.bilibili.com/video/av44544186 让我有了创建博客的想法 搭建 搭建这一步我其实没踩什么坑,就简单介绍下流程 前期软件准备node.js因为 hexo 是基于 node 框架的，所以呢，我们首先需要下载安装node.js，下载地址: 这里 git当然还有git, 下载地址: 这里 下好后安装就直接疯狂下一步,默认配置,不要动,反正看到next 点就完事了 安装hexo接下里这一步网上就有分歧或是描述不清,无非是新建一个文件夹用来之后装hexo,文件夹的名字随便好啦 建好后进去右键 git bash here 输入 node -v 看会不会显示出版本号,接着输入npm -v同理看有无版本号 接下来安装cnpm,之后要用它装hexo,即输入npm install -g cnpm –registry=https://registry.npm.taobao.org/ 这里选择镜像到淘宝因为cnpm在国内的下载速度不友好,安好后同样用 cnpm -v检查,出来相关信息则成功了接着就是hexo了,输入cnpm install -g hexo-cli,安装好后老套路hexo -v检查,至此前期软件准备算是告一段落 本地搭建现在我们pwd一下看看在什么位置(其实也没过多久噢,就在开始新建的那个文件下),现在要做的就是输入hexo init,把我们这个文件夹作为hexo的一个临时文件夹,相当于这就是你以后的”博客文件夹”不管是之后进阶美化还是发博客都在这个文件夹中进行操作,与此同时如果你在之后操作过程中瞎折腾回不去了就直接删掉文件夹中内容重新 hexo init回档好了 文件夹中现在应该有8个文件(划线的是我之后操作生成的,初始就是这8个),噢对了,在bit bash中hexo init完后正常情况最后会有一行INFO Start blogging with Hexo!,如果有那就是对的，于是现在要做的只要一行 hexo s 搭建其实就算是结束,但只是在本地搭建好了 浏览器里输入localhost: 4000就能本地查看你的博客了因为我这2天改过一些基本配置了所以默认不是这样而是这样的我也不清楚除了回档外怎么变回默认所以就在网上找了张初始状态的照片了 部署至github出于我只尝试了部署到github上公开使用,所以这里就介绍下部署到github的步骤吧既然是github那总得要有个github账号吧,除非你真是超级纯纯纯纯小白,实在没有就注册个,登录后点右上角加号新建一个仓库即new repository!!!注意!!!仓库命名开头一定要是你自己的昵称.这个仓库就是存你hexo数据的地方,相当于一个有我们博客数据的云文件,现在我们继续回到bit bash中进行操作,输入cnpm install –save hexo-deployer-git插件这个插件相当于是沟通你本地数据与github仓库的通道,之后在每次本地数据编辑完后都要用到它,现在有了通道,本地数据,还有部署的仓库,只差怎样部署了至于怎么部署就到文件夹根目录下找config.yml的配置文件进去更改数据形成部署,编译器的话notepad++ , sublime都行,我用的前者,打开后来到最底部找到deploy:type后加git 并添加repo: https://github.com/youname/yourname.git/ ; branch: master repo后面的网址就是新建仓库的网址当然这步也可以在bit bash 中输入vim _config.yml进行,但记住ctrl c后一定要打:wq而不是:qa前者是保存并退出而后者是放弃当前操作并退出(我当时就在这吃了亏)接下来就是搭建的最后一步 : bit bash 中输入hexo d 进行最终的部署工作, 这时它会让你填你的username和password 作为进入仓库的凭证(毕竟谁都不想让自己的博客被别人瞎搞吧)所有都验证完毕后,出现 INFO Deploy done: git 表明部署完成 这时再看你之前新建的仓库则会发现Code下会多出许多文件,这时直接浏览器里输入自己设置好的github博客网址, hexo对github部署完毕! 博客也终算搭建成功 对了,在搭桥github这步网上有些用SSH的,就是自己现在bitbash中配置bithub账户然后再创建SSH之后将ssh-key放到github中去,但我嫌实在太麻烦了,直接hexo d 输入一遍名字密码不简洁明了的多吗","categories":[{"name":"个人博客","slug":"个人博客","permalink":"http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"Life is short,you need Python.","slug":"Life-is-short-you-need-Python","date":"2020-04-27T12:17:10.000Z","updated":"2020-05-08T04:56:38.761Z","comments":true,"path":"2020/04/27/Life-is-short-you-need-Python/","link":"","permalink":"http://yoursite.com/2020/04/27/Life-is-short-you-need-Python/","excerpt":"##内容 The Zen of Python, by Tim Peters","text":"##内容 The Zen of Python, by Tim Peters Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren’t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one– and preferably only one –obvious way to do it.Although that way may not be obvious at first unless you’re Dutch.Now is better than never.Although never is often better than right now.If the implementation is hard to explain, it’s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea – let’s do more of those! ##译文Python之禅 by Tim Peters 优美胜于丑陋（Python 以编写优美的代码为目标）明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）可读性很重要（优美的代码是可读的）即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上） 不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码） 当存在多种可能，不要尝试去猜测而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ） 做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量） 如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准） 命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]}],"categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"},{"name":"个人博客","slug":"个人博客","permalink":"http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Pyhton","slug":"Pyhton","permalink":"http://yoursite.com/tags/Pyhton/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"个人博客","slug":"个人博客","permalink":"http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]}